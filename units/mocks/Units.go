// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/AltMax/art-test/models"
	mock "github.com/stretchr/testify/mock"
)

// Units is an autogenerated mock type for the Units type
type Units struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, unit
func (_m *Units) Create(ctx context.Context, unit *models.Unit) error {
	ret := _m.Called(ctx, unit)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Unit) error); ok {
		r0 = rf(ctx, unit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Units) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAll provides a mock function with given fields: ctx
func (_m *Units) FetchAll(ctx context.Context) (models.Units, error) {
	ret := _m.Called(ctx)

	var r0 models.Units
	if rf, ok := ret.Get(0).(func(context.Context) models.Units); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Units)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *Units) FindByID(ctx context.Context, id string) (*models.Unit, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Unit
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Unit); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Unit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDs provides a mock function with given fields: ctx, ids
func (_m *Units) FindByIDs(ctx context.Context, ids []string) (models.Units, error) {
	ret := _m.Called(ctx, ids)

	var r0 models.Units
	if rf, ok := ret.Get(0).(func(context.Context, []string) models.Units); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Units)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, data
func (_m *Units) Update(ctx context.Context, id string, data []byte) (*models.Unit, error) {
	ret := _m.Called(ctx, id, data)

	var r0 *models.Unit
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) *models.Unit); ok {
		r0 = rf(ctx, id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Unit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUnits interface {
	mock.TestingT
	Cleanup(func())
}

// NewUnits creates a new instance of Units. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUnits(t mockConstructorTestingTNewUnits) *Units {
	mock := &Units{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
